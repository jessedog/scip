#lang sicp
(#%require "p7.rkt")

(define (new-mul-interval x y)
  (define (+? n) (>= n 0))
  (define (-? n) (not (+? n)))

  (let ((xl (lower-bound x))
        (xu (upper-bound x))
        (yl (lower-bound y))
        (yu (upper-bound y)))
    (cond ((and (+? xl) (+? xu) (+? yl) (+? yu)) (make-interval (* xl yl) (* xu yu)))
          ((and (-? xl) (+? xu) (+? yl) (+? yu)) (make-interval (* xl yu) (* xu yu)))
          ((and (-? xl) (-? xu) (+? yl) (+? yu)) (make-interval (* xl yu) (* xu yl)))
          ((and (-? xl) (-? xu) (-? yl) (+? yu)) (make-interval (* xl yu) (* xu yl)))
          ((and (-? xl) (-? xu) (-? yl) (-? yu)) (make-interval (* xl yl) (* xu yu)))
          ((and (+? xl) (+? xu) (-? yl) (+? yu)) (make-interval (* xu yl) (* xu yu)))
          ((and (+? xl) (+? xu) (-? yl) (-? yu)) (make-interval (* xu yl) (* xl yu)))
          ((and (-? xl) (+? xu) (-? yl) (-? yu)) (make-interval (* xu yl) (* xl yu)))
          ((and (-? xl) (+? xu) (-? yl) (+? yu))
           (let ((l (min (* xl yu) (* xu yl)))
             (h (max (* xl yl) (* xu yu))))
             (make-interval l h)))
    )
  ))

(print-interval (new-mul-interval (make-interval 1 3) (make-interval 4 8)))
(newline)
(print-interval (new-mul-interval (make-interval -4 3) (make-interval 4 8)))
(newline)
(print-interval (new-mul-interval (make-interval -5 -3) (make-interval 4 8)))
(newline)
(print-interval (new-mul-interval (make-interval -5 -3) (make-interval -4 8)))
(newline)
(print-interval (new-mul-interval (make-interval -5 -3) (make-interval -4 -2)))
(newline)
(print-interval (new-mul-interval (make-interval 1 3) (make-interval -4 8)))
(newline)
(print-interval (new-mul-interval (make-interval 1 3) (make-interval -4 -2)))
(newline)
(print-interval (new-mul-interval (make-interval -1 3) (make-interval -4 -2)))
(newline)
(print-interval (new-mul-interval (make-interval -1 3) (make-interval -4 2)))
(newline)
(print-interval (new-mul-interval (make-interval -3 2) (make-interval -4 2)))
(newline)