(load ">=.ss")

; 递归计算过程
(define (f1 n)
  (cond ((< n 3) n)
        ((>= n 3)
          (+ 
            (+ 
              (f1 (- n 1)) 
              (* 2 (f1 (- n 2)))
            )
            (* 3 (f1 (- n 3)))
          )
        )
  )
)
; (f1 5)
; (+ (+ (f1 4) (* 2 (f1 3))) (* 3 (f1 2)))
; (+ (+ (+ (+ (f1 3) (* 2 (f1 2))) (* 3 (f1 1))) (* 2 (+ (+ (f1 2) (* 2 (f1 1))) (* 3 (f1 0))))) (* 3 (f1 2)))
; (+ (+ (+ (+ (+ (+ (f1 2) (* 2 (f1 1))) (* 3 (f1 0))) (* 2 (f1 2))) (* 3 (f1 1))) (* 2 (+ (+ (f1 2) (* 2 (f1 1))) (* 3 (f1 0))))) (* 3 (f1 2)))
; (+ (+ (+ (+ (+ (+ 2 (* 2 1)) (* 3 0)) (* 2 2)) (* 3 1)) (* 2 (+ (+ 2 (* 2 1)) (* 3 0)))) (* 3 2))
; (+ (+ (+ (+ (+ (+ 2 2) 0) 4) 3) (* 2 (+ (+ 2 2) 0))) 6)
; (+ (+ (+ (+ (+ 4 0) 4) 3) (* 2 (+ 4 0))) 6)
; (+ (+ (+ (+ 4 4) 3) (* 2 4)) 6)
; (+ (+ (+ 8 3) 8) 6)
; (+ (+ 11 8) 6)
; (+ 19 6)
; 25


(display (f1 5))
(display " ")

; 迭代计算过程
(define (f2 n)
  (if (< n 3) 
    n
    (f-iter 2 1 0 3 n)
  )
)

(define (f-iter n-1 n-2 n-3 counter max) 
  (if (> counter max)
      n-1
      (f-iter (+ n-1 (+ (* 2 n-2) (* 3 n-3))) n-1 n-2 (+ counter 1) max)
  )
)
; (f2 5)
; (f-iter 2 1 0 3 5)
; (f-iter 4 2 1 4 5)
; (f-iter 11 4 2 5 5)
; 11

(display (f2 5))
